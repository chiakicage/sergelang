fn gcd(a: int, b: int) -> int {
	if b == 0 { a } else { gcd(b, a % b) }
}

enum Name {
	First(string),
	Last {
		first: string,
		last: string,
	}
}

fn add(a: int, b: int) -> int {
	a + b
}
fn sub(a: int, b: int) -> int {
	a - b
}

fn main() -> int {
	let a: int = 1;
	let b: int = 2;
	let c: (int, int, int) = (1, 2, 3);
	let d: [int] = [1, 2, 3];
	let f: fn(int, int) -> int = sub;
	let e: fn(int, int) -> int = |a: int, b: int| -> int { a + b };
	let t: ((int, int), int) = ((1, 2), 3);
	let e: [int] = d;
	let c: int = add(a, b);
	if a > b {
		a
	} else if a < b {
		b
	} else {
		c
	}
	if a < b {
		a
	}
	
}


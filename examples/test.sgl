/*fn gcd(a: int, b: int) -> int {
	if b == 0 { a } else { gcd(b, a % b) }
}

enum Name {
	First(String),
	Last {
		first: String,
		last: String,
	}
}

fn add(a: int, b: int) -> int {
	a + b
}
fn sub(a: int, b: int) -> int {
	a - b
}*/

fn main() -> int {
	let a: int = 1;
	let b: int = 2;
	let c: int = (1, 2, 3);
	let d: int = [1, 2, 3];
	let f: fn(int, int) -> int = sub;
	let e: int = |a: int, b: int| -> int { a + b };
	let t: ((int, int), int) = ((1, 2), 3);
	let e: int = -d;
	let c: int = a(a, b)[123](a);
	
}


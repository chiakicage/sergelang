@startuml AST
0 : Module
0 : 
0 --> 1
1 : Decl
1 --> 2
2 :  Decl::FuncDecl::name : 
2 --> 3
3 : "gcd"
3 : Decl
1 --> 4
4 :  Decl::FuncDecl::args : 
4 --> 5
5 :  "a" 
5 --> 6
6 :  TypeStr::Named : "i32" 
6 : 
4 --> 7
7 :  "b" 
7 --> 8
8 :  TypeStr::Named : "i32" 
8 : Decl
1 --> 9
9 :  Decl::FuncDecl::return_ty : 
9 --> 10
10 :  TypeStr::Named : "i32" 
10 : Decl
1 --> 11
11 :  Decl::FuncDecl::body : 
11 --> 12
12 :  Expr::Block : 
12 --> 13
13 :  Expr::If : 
13 --> 14
14 :  cond : 
14 --> 15
15 :  Expr::BinOpExpr : 
15 --> 16
16 :  lhs : 
16 --> 17
17 :  Expr::Var : "b"
17 : 
15 --> 18
18 :  op : 
18 --> 19
19 : ==
19 : 
15 --> 20
20 :  rhs : 
20 --> 21
21 :  Integer: 0 
21 : 
13 --> 22
22 :  then : 
22 --> 23
23 :  Expr::Block : 
23 --> 24
24 :  Expr::Var : "a"
24 : 
13 --> 25
25 :  else : 
25 --> 26
26 :  Expr::Block : 
26 --> 27
27 :  Expr::Call : 
27 --> 28
28 :  func : 
28 --> 29
29 :  Expr::Var : "gcd"
29 : 
27 --> 30
30 :  args : 
30 --> 31
31 :  Expr::Var : "b"
31 : 
30 --> 32
32 :  Expr::BinOpExpr : 
32 --> 33
33 :  lhs : 
33 --> 34
34 :  Expr::Var : "a"
34 : 
32 --> 35
35 :  op : 
35 --> 36
36 : %
36 : 
32 --> 37
37 :  rhs : 
37 --> 38
38 :  Expr::Var : "b"
38 : 
0 --> 39
39 : Decl
39 --> 40
40 :  Decl::EnumDecl::name : 
40 --> 41
41 : "Name"
41 : Decl
39 --> 42
42 :  Decl::EnumDecl::ctors : 
42 --> 43
43 :  CtorDecl::name : 
43 --> 44
44 : "First"
44 : 
42 --> 45
45 :  CtorDecl::fields : 
45 --> 46
46 :  Fields::NamelessFields : 
46 --> 47
47 :  TypeStr::Named : "i32" 
47 : 
42 --> 48
48 :  CtorDecl::name : 
48 --> 49
49 : "Last"
49 : 
42 --> 50
50 :  CtorDecl::fields : 
50 --> 51
51 :  Fields::NamedFields : 
51 --> 52
52 :  "first"  
52 --> 53
53 :  TypeStr::Named : "i32" 
53 : 
51 --> 54
54 :  "last"  
54 --> 55
55 :  TypeStr::Tuple : 
55 --> 56
56 :  TypeStr::Named : "i32" 
56 : 
55 --> 57
57 :  TypeStr::Named : "i32" 
57 : 
0 --> 58
58 : Decl
58 --> 59
59 :  Decl::EnumDecl::name : 
59 --> 60
60 : "List"
60 : Decl
58 --> 61
61 :  Decl::EnumDecl::ctors : 
61 --> 62
62 :  CtorDecl::name : 
62 --> 63
63 : "Nil"
63 : 
61 --> 64
64 :  CtorDecl::name : 
64 --> 65
65 : "One"
65 : 
61 --> 66
66 :  CtorDecl::fields : 
66 --> 67
67 :  Fields::NamelessFields : 
67 --> 68
68 :  TypeStr::Named : "i32" 
68 : 
61 --> 69
69 :  CtorDecl::name : 
69 --> 70
70 : "Cons"
70 : 
61 --> 71
71 :  CtorDecl::fields : 
71 --> 72
72 :  Fields::NamelessFields : 
72 --> 73
73 :  TypeStr::Named : "i32" 
73 : 
72 --> 74
74 :  TypeStr::Named : "List" 
74 : 
0 --> 75
75 : Decl
75 --> 76
76 :  Decl::FuncDecl::name : 
76 --> 77
77 : "add"
77 : Decl
75 --> 78
78 :  Decl::FuncDecl::args : 
78 --> 79
79 :  "a" 
79 --> 80
80 :  TypeStr::Named : "i32" 
80 : 
78 --> 81
81 :  "b" 
81 --> 82
82 :  TypeStr::Named : "i32" 
82 : Decl
75 --> 83
83 :  Decl::FuncDecl::return_ty : 
83 --> 84
84 :  TypeStr::Named : "i32" 
84 : Decl
75 --> 85
85 :  Decl::FuncDecl::body : 
85 --> 86
86 :  Expr::Block : 
86 --> 87
87 :  Expr::BinOpExpr : 
87 --> 88
88 :  lhs : 
88 --> 89
89 :  Expr::Var : "a"
89 : 
87 --> 90
90 :  op : 
90 --> 91
91 : +
91 : 
87 --> 92
92 :  rhs : 
92 --> 93
93 :  Expr::Var : "b"
93 : 
0 --> 94
94 : Decl
94 --> 95
95 :  Decl::FuncDecl::name : 
95 --> 96
96 : "sub"
96 : Decl
94 --> 97
97 :  Decl::FuncDecl::args : 
97 --> 98
98 :  "a" 
98 --> 99
99 :  TypeStr::Named : "i32" 
99 : 
97 --> 100
100 :  "b" 
100 --> 101
101 :  TypeStr::Named : "i32" 
101 : Decl
94 --> 102
102 :  Decl::FuncDecl::return_ty : 
102 --> 103
103 :  TypeStr::Named : "i32" 
103 : Decl
94 --> 104
104 :  Decl::FuncDecl::body : 
104 --> 105
105 :  Expr::Block : 
105 --> 106
106 :  Expr::BinOpExpr : 
106 --> 107
107 :  lhs : 
107 --> 108
108 :  Expr::Var : "a"
108 : 
106 --> 109
109 :  op : 
109 --> 110
110 : -
110 : 
106 --> 111
111 :  rhs : 
111 --> 112
112 :  Expr::Var : "b"
112 : 
0 --> 113
113 : Decl
113 --> 114
114 :  Decl::FuncDecl::name : 
114 --> 115
115 : "main"
115 : Decl
113 --> 116
116 :  Decl::FuncDecl::args : 
116 : Decl
113 --> 117
117 :  Decl::FuncDecl::return_ty : 
117 --> 118
118 :  TypeStr::Named : "i32" 
118 : Decl
113 --> 119
119 :  Decl::FuncDecl::body : 
119 --> 120
120 :  Expr::Block : 
120 --> 121
121 :  Expr::Let : 
121 --> 122
122 :  name : "z"
122 : 
121 --> 123
123 :  ty : 
123 --> 124
124 :  TypeStr::Named : "f64" 
124 : 
121 --> 125
125 :  rhs : 
125 --> 126
126 :  Float: 1.5 
126 : 
120 --> 127
127 :  Expr::Let : 
127 --> 128
128 :  name : "a"
128 : 
127 --> 129
129 :  ty : 
129 --> 130
130 :  TypeStr::Named : "i32" 
130 : 
127 --> 131
131 :  rhs : 
131 --> 132
132 :  Integer: 1 
132 : 
120 --> 133
133 :  Expr::Let : 
133 --> 134
134 :  name : "b"
134 : 
133 --> 135
135 :  ty : 
135 --> 136
136 :  TypeStr::Named : "i32" 
136 : 
133 --> 137
137 :  rhs : 
137 --> 138
138 :  Integer: 2 
138 : 
120 --> 139
139 :  Expr::Let : 
139 --> 140
140 :  name : "c"
140 : 
139 --> 141
141 :  ty : 
141 --> 142
142 :  TypeStr::Tuple : 
142 --> 143
143 :  TypeStr::Named : "i32" 
143 : 
142 --> 144
144 :  TypeStr::Named : "i32" 
144 : 
142 --> 145
145 :  TypeStr::Named : "i32" 
145 : 
139 --> 146
146 :  rhs : 
146 --> 147
147 :  Expr::Tuple : 
147 --> 148
148 :  Integer: 1 
148 : 
147 --> 149
149 :  Integer: 2 
149 : 
147 --> 150
150 :  Integer: 3 
150 : 
120 --> 151
151 :  Expr::Let : 
151 --> 152
152 :  name : "d"
152 : 
151 --> 153
153 :  ty : 
153 --> 154
154 :  TypeStr::Array : 
154 --> 155
155 :  TypeStr::Named : "i32" 
155 : 
151 --> 156
156 :  rhs : 
156 --> 157
157 :  Expr::Array :
157 --> 158
158 :  Integer: 1 
158 : 
157 --> 159
159 :  Integer: 2 
159 : 
157 --> 160
160 :  Integer: 3 
160 : 
120 --> 161
161 :  Expr::Let : 
161 --> 162
162 :  name : "f"
162 : 
161 --> 163
163 :  ty : 
163 --> 164
164 :  TyprRef::Func : 
164 --> 165
165 :  Vec :
165 --> 166
166 :  TypeStr::Named : "i32" 
166 : 
165 --> 167
167 :  TypeStr::Named : "i32" 
167 : 
164 --> 168
168 :  TypeStr::Named : "i32" 
168 : 
161 --> 169
169 :  rhs : 
169 --> 170
170 :  Expr::Var : "sub"
170 : 
120 --> 171
171 :  Expr::Let : 
171 --> 172
172 :  name : "g"
172 : 
171 --> 173
173 :  ty : 
173 --> 174
174 :  TyprRef::Func : 
174 --> 175
175 :  Vec :
175 --> 176
176 :  TypeStr::Named : "i32" 
176 : 
175 --> 177
177 :  TypeStr::Named : "i32" 
177 : 
174 --> 178
178 :  TypeStr::Named : "i32" 
178 : 
171 --> 179
179 :  rhs : 
179 --> 180
180 : Expr::Closure : 
180 --> 181
181 :  args : 
181 --> 182
182 : 
182 --> 183
183 : arg_name : "a"
183 :  
182 --> 184
184 :  TypeStr::Named : "i32" 
184 : 
181 --> 185
185 : 
185 --> 186
186 : arg_name : "b"
186 :  
185 --> 187
187 :  TypeStr::Named : "i32" 
187 : 
180 --> 188
188 :  return_ty : 
188 --> 189
189 :  TypeStr::Named : "i32" 
189 : 
180 --> 190
190 :  body : 
190 --> 191
191 :  Expr::Block : 
191 --> 192
192 :  Expr::BinOpExpr : 
192 --> 193
193 :  lhs : 
193 --> 194
194 :  Expr::Var : "a"
194 : 
192 --> 195
195 :  op : 
195 --> 196
196 : +
196 : 
192 --> 197
197 :  rhs : 
197 --> 198
198 :  Expr::Var : "b"
198 : 
120 --> 199
199 :  Expr::Let : 
199 --> 200
200 :  name : "t"
200 : 
199 --> 201
201 :  ty : 
201 --> 202
202 :  TypeStr::Tuple : 
202 --> 203
203 :  TypeStr::Tuple : 
203 --> 204
204 :  TypeStr::Named : "i32" 
204 : 
203 --> 205
205 :  TypeStr::Named : "i32" 
205 : 
202 --> 206
206 :  TypeStr::Named : "i32" 
206 : 
199 --> 207
207 :  rhs : 
207 --> 208
208 :  Expr::Tuple : 
208 --> 209
209 :  Expr::Tuple : 
209 --> 210
210 :  Integer: 1 
210 : 
209 --> 211
211 :  Integer: 2 
211 : 
208 --> 212
212 :  Integer: 3 
212 : 
120 --> 213
213 :  Expr::Let : 
213 --> 214
214 :  name : "e"
214 : 
213 --> 215
215 :  ty : 
215 --> 216
216 :  TypeStr::Array : 
216 --> 217
217 :  TypeStr::Named : "i32" 
217 : 
213 --> 218
218 :  rhs : 
218 --> 219
219 :  Expr::Var : "d"
219 : 
120 --> 220
220 :  Expr::Let : 
220 --> 221
221 :  name : "c"
221 : 
220 --> 222
222 :  ty : 
222 --> 223
223 :  TypeStr::Named : "i32" 
223 : 
220 --> 224
224 :  rhs : 
224 --> 225
225 :  Expr::Call : 
225 --> 226
226 :  func : 
226 --> 227
227 :  Expr::Var : "add"
227 : 
225 --> 228
228 :  args : 
228 --> 229
229 :  Expr::Var : "a"
229 : 
228 --> 230
230 :  Expr::Var : "b"
230 : 
120 --> 231
231 :  Expr::If : 
231 --> 232
232 :  cond : 
232 --> 233
233 :  Expr::BinOpExpr : 
233 --> 234
234 :  lhs : 
234 --> 235
235 :  Expr::Var : "a"
235 : 
233 --> 236
236 :  op : 
236 --> 237
237 : >
237 : 
233 --> 238
238 :  rhs : 
238 --> 239
239 :  Expr::Var : "b"
239 : 
231 --> 240
240 :  then : 
240 --> 241
241 :  Expr::Block : 
241 --> 242
242 :  Expr::Var : "a"
242 : 
231 --> 243
243 :  else : 
243 --> 244
244 :  Expr::If : 
244 --> 245
245 :  cond : 
245 --> 246
246 :  Expr::BinOpExpr : 
246 --> 247
247 :  lhs : 
247 --> 248
248 :  Expr::Var : "a"
248 : 
246 --> 249
249 :  op : 
249 --> 250
250 : <
250 : 
246 --> 251
251 :  rhs : 
251 --> 252
252 :  Expr::Var : "b"
252 : 
244 --> 253
253 :  then : 
253 --> 254
254 :  Expr::Block : 
254 --> 255
255 :  Expr::Var : "b"
255 : 
244 --> 256
256 :  else : 
256 --> 257
257 :  Expr::If : 
257 --> 258
258 :  cond : 
258 --> 259
259 :  Expr::BinOpExpr : 
259 --> 260
260 :  lhs : 
260 --> 261
261 :  Expr::Var : "a"
261 : 
259 --> 262
262 :  op : 
262 --> 263
263 : ==
263 : 
259 --> 264
264 :  rhs : 
264 --> 265
265 :  Expr::Var : "b"
265 : 
257 --> 266
266 :  then : 
266 --> 267
267 :  Expr::Block : 
267 --> 268
268 :  Expr::Var : "c"
268 : 
257 --> 269
269 :  else : 
269 --> 270
270 :  Expr::Block : 
270 --> 271
271 :  Expr::Var : "a"
271 : 
120 --> 272
272 :  Expr::If : 
272 --> 273
273 :  cond : 
273 --> 274
274 :  Expr::BinOpExpr : 
274 --> 275
275 :  lhs : 
275 --> 276
276 :  Expr::Var : "a"
276 : 
274 --> 277
277 :  op : 
277 --> 278
278 : <
278 : 
274 --> 279
279 :  rhs : 
279 --> 280
280 :  Expr::Var : "b"
280 : 
272 --> 281
281 :  then : 
281 --> 282
282 :  Expr::Block : 
282 --> 283
283 :  Expr::Var : "a"
283 : 
120 --> 284
284 :  Expr::Let : 
284 --> 285
285 :  name : "d"
285 : 
284 --> 286
286 :  ty : 
286 --> 287
287 :  TypeStr::Named : "Name" 
287 : 
284 --> 288
288 :  rhs : 
288 --> 289
289 :  Expr::Ctor : 
289 --> 290
290 :  ty_name : 
290 --> 291
291 : "Name"
291 :  
289 --> 292
292 :  name : 
292 --> 293
293 : "First"
293 : 
289 --> 294
294 :  Exprfields : 
294 --> 295
295 :  NamelessFields : 
295 --> 296
296 :  Integer: 123 
296 : 
120 --> 297
297 :  Expr::Let : 
297 --> 298
298 :  name : "first"
298 : 
297 --> 299
299 :  ty : 
299 --> 300
300 :  TypeStr::Named : "i32" 
300 : 
297 --> 301
301 :  rhs : 
301 --> 302
302 :  Integer: 1 
302 : 
120 --> 303
303 :  Expr::Let : 
303 --> 304
304 :  name : "last"
304 : 
303 --> 305
305 :  ty : 
305 --> 306
306 :  TypeStr::Tuple : 
306 --> 307
307 :  TypeStr::Named : "i32" 
307 : 
306 --> 308
308 :  TypeStr::Named : "i32" 
308 : 
303 --> 309
309 :  rhs : 
309 --> 310
310 :  Expr::Tuple : 
310 --> 311
311 :  Integer: 2 
311 : 
310 --> 312
312 :  Integer: 3 
312 : 
120 --> 313
313 :  Expr::Let : 
313 --> 314
314 :  name : "f"
314 : 
313 --> 315
315 :  ty : 
315 --> 316
316 :  TypeStr::Named : "Name" 
316 : 
313 --> 317
317 :  rhs : 
317 --> 318
318 :  Expr::Ctor : 
318 --> 319
319 :  ty_name : 
319 --> 320
320 : "Name"
320 :  
318 --> 321
321 :  name : 
321 --> 322
322 : "Last"
322 : 
318 --> 323
323 :  Exprfields : 
323 --> 324
324 :  NamedFields : 
324 --> 325
325 :  name : "first"   
325 : 
324 --> 326
326 :  name : "last"  
326 --> 327
327 :  Expr::Var : "last"
327 : 
120 --> 328
328 :  Expr::Match : 
328 --> 329
329 :  expr : 
329 --> 330
330 :  Expr::Var : "f"
330 : 
328 --> 331
331 :  arms : 
331 --> 332
332 :  MatchArm : 
332 --> 333
333 :  MatchArm::pattern : 
333 --> 334
334 :  Pattern : 
334 --> 335
335 :  Pattern::Ctor : 
335 --> 336
336 :  ty_name : "Name" 
336 : 
335 --> 337
337 :  name : "First" 
337 : 
335 --> 338
338 :  NamelessFields : 
338 --> 339
339 :  Pattern : 
339 --> 340
340 :  Pattern::Var : 
340 --> 341
341 :  Expr::Var : "a"
341 : 
332 --> 342
342 :  MatchArm::expr : 
342 --> 343
343 :  Expr::Var : "a"
343 : 
331 --> 344
344 :  MatchArm : 
344 --> 345
345 :  MatchArm::pattern : 
345 --> 346
346 :  Pattern : 
346 --> 347
347 :  Pattern::Ctor : 
347 --> 348
348 :  ty_name : "Name" 
348 : 
347 --> 349
349 :  name : "Last" 
349 : 
347 --> 350
350 :  NamedFields : 
350 --> 351
351 : name : "first"
351 : 
350 --> 352
352 : name : "last"
352 : 
350 --> 353
353 :  Pattern : 
353 --> 354
354 :  Pattern::Tuple : 
354 --> 355
355 :  Pattern : 
355 --> 356
356 :  Pattern::Lit : 
356 --> 357
357 :  Integer: 1 
357 : 
354 --> 358
358 :  Pattern : 
358 --> 359
359 :  Pattern::Var : 
359 --> 360
360 :  Expr::Var : "b"
360 : 
344 --> 361
361 :  MatchArm::expr : 
361 --> 362
362 :  Expr::BinOpExpr : 
362 --> 363
363 :  lhs : 
363 --> 364
364 :  Expr::BinOpExpr : 
364 --> 365
365 :  lhs : 
365 --> 366
366 :  Expr::Var : "a"
366 : 
364 --> 367
367 :  op : 
367 --> 368
368 : +
368 : 
364 --> 369
369 :  rhs : 
369 --> 370
370 :  Expr::Var : "b"
370 : 
362 --> 371
371 :  op : 
371 --> 372
372 : +
372 : 
362 --> 373
373 :  rhs : 
373 --> 374
374 :  Expr::Var : "first"
374 : 
331 --> 375
375 :  MatchArm : 
375 --> 376
376 :  MatchArm::pattern : 
376 --> 377
377 :  Pattern : 
377 --> 378
378 :  Pattern::Ctor : 
378 --> 379
379 :  ty_name : "Name" 
379 : 
378 --> 380
380 :  name : "Last" 
380 : 
378 --> 381
381 :  NamedFields : 
381 --> 382
382 : name : "first"
382 : 
381 --> 383
383 : name : "last"
383 : 
381 --> 384
384 :  Pattern : 
384 --> 385
385 :  Pattern::Tuple : 
385 --> 386
386 :  Pattern : 
386 --> 387
387 :  Pattern::Var : 
387 --> 388
388 :  Expr::Var : "a"
388 : 
385 --> 389
389 :  Pattern : 
389 --> 390
390 :  Pattern::Var : 
390 --> 391
391 :  Expr::Var : "b"
391 : 
375 --> 392
392 :  MatchArm::expr : 
392 --> 393
393 :  Expr::BinOpExpr : 
393 --> 394
394 :  lhs : 
394 --> 395
395 :  Expr::BinOpExpr : 
395 --> 396
396 :  lhs : 
396 --> 397
397 :  Expr::Var : "c"
397 : 
395 --> 398
398 :  op : 
398 --> 399
399 : +
399 : 
395 --> 400
400 :  rhs : 
400 --> 401
401 :  Expr::Var : "b"
401 : 
393 --> 402
402 :  op : 
402 --> 403
403 : +
403 : 
393 --> 404
404 :  rhs : 
404 --> 405
405 :  Expr::Var : "first"
405 : 
120 --> 406
406 :  Expr::Let : 
406 --> 407
407 :  name : "list"
407 : 
406 --> 408
408 :  ty : 
408 --> 409
409 :  TypeStr::Tuple : 
409 --> 410
410 :  TypeStr::Named : "List" 
410 : 
409 --> 411
411 :  TypeStr::Named : "List" 
411 : 
406 --> 412
412 :  rhs : 
412 --> 413
413 :  Expr::Tuple : 
413 --> 414
414 :  Expr::Ctor : 
414 --> 415
415 :  ty_name : 
415 --> 416
416 : "List"
416 :  
414 --> 417
417 :  name : 
417 --> 418
418 : "Nil"
418 : 
413 --> 419
419 :  Expr::Ctor : 
419 --> 420
420 :  ty_name : 
420 --> 421
421 : "List"
421 :  
419 --> 422
422 :  name : 
422 --> 423
423 : "Nil"
423 : 
120 --> 424
424 :  Expr::Match : 
424 --> 425
425 :  expr : 
425 --> 426
426 :  Expr::Var : "list"
426 : 
424 --> 427
427 :  arms : 
427 --> 428
428 :  MatchArm : 
428 --> 429
429 :  MatchArm::pattern : 
429 --> 430
430 :  Pattern : 
430 --> 431
431 :  Pattern::Tuple : 
431 --> 432
432 :  Pattern : 
432 --> 433
433 :  Pattern::Var : 
433 --> 434
434 :  Expr::Var : "_"
434 : 
431 --> 435
435 :  Pattern : 
435 --> 436
436 :  Pattern::Ctor : 
436 --> 437
437 :  ty_name : "List" 
437 : 
436 --> 438
438 :  name : "Nil" 
438 : 
428 --> 439
439 :  MatchArm::expr : 
439 --> 440
440 :  Integer: 1 
440 : 
427 --> 441
441 :  MatchArm : 
441 --> 442
442 :  MatchArm::pattern : 
442 --> 443
443 :  Pattern : 
443 --> 444
444 :  Pattern::Tuple : 
444 --> 445
445 :  Pattern : 
445 --> 446
446 :  Pattern::Ctor : 
446 --> 447
447 :  ty_name : "List" 
447 : 
446 --> 448
448 :  name : "Nil" 
448 : 
444 --> 449
449 :  Pattern : 
449 --> 450
450 :  Pattern::Var : 
450 --> 451
451 :  Expr::Var : "_"
451 : 
441 --> 452
452 :  MatchArm::expr : 
452 --> 453
453 :  Integer: 2 
453 : 
427 --> 454
454 :  MatchArm : 
454 --> 455
455 :  MatchArm::pattern : 
455 --> 456
456 :  Pattern : 
456 --> 457
457 :  Pattern::Tuple : 
457 --> 458
458 :  Pattern : 
458 --> 459
459 :  Pattern::Ctor : 
459 --> 460
460 :  ty_name : "List" 
460 : 
459 --> 461
461 :  name : "One" 
461 : 
459 --> 462
462 :  NamelessFields : 
462 --> 463
463 :  Pattern : 
463 --> 464
464 :  Pattern::Var : 
464 --> 465
465 :  Expr::Var : "_"
465 : 
457 --> 466
466 :  Pattern : 
466 --> 467
467 :  Pattern::Var : 
467 --> 468
468 :  Expr::Var : "_"
468 : 
454 --> 469
469 :  MatchArm::expr : 
469 --> 470
470 :  Integer: 3 
470 : 
427 --> 471
471 :  MatchArm : 
471 --> 472
472 :  MatchArm::pattern : 
472 --> 473
473 :  Pattern : 
473 --> 474
474 :  Pattern::Tuple : 
474 --> 475
475 :  Pattern : 
475 --> 476
476 :  Pattern::Var : 
476 --> 477
477 :  Expr::Var : "_"
477 : 
474 --> 478
478 :  Pattern : 
478 --> 479
479 :  Pattern::Ctor : 
479 --> 480
480 :  ty_name : "List" 
480 : 
479 --> 481
481 :  name : "One" 
481 : 
479 --> 482
482 :  NamelessFields : 
482 --> 483
483 :  Pattern : 
483 --> 484
484 :  Pattern::Var : 
484 --> 485
485 :  Expr::Var : "_"
485 : 
471 --> 486
486 :  MatchArm::expr : 
486 --> 487
487 :  Integer: 4 
487 : 
427 --> 488
488 :  MatchArm : 
488 --> 489
489 :  MatchArm::pattern : 
489 --> 490
490 :  Pattern : 
490 --> 491
491 :  Pattern::Tuple : 
491 --> 492
492 :  Pattern : 
492 --> 493
493 :  Pattern::Ctor : 
493 --> 494
494 :  ty_name : "List" 
494 : 
493 --> 495
495 :  name : "Cons" 
495 : 
493 --> 496
496 :  NamelessFields : 
496 --> 497
497 :  Pattern : 
497 --> 498
498 :  Pattern::Var : 
498 --> 499
499 :  Expr::Var : "_"
499 : 
496 --> 500
500 :  Pattern : 
500 --> 501
501 :  Pattern::Var : 
501 --> 502
502 :  Expr::Var : "_"
502 : 
491 --> 503
503 :  Pattern : 
503 --> 504
504 :  Pattern::Var : 
504 --> 505
505 :  Expr::Var : "_"
505 : 
488 --> 506
506 :  MatchArm::expr : 
506 --> 507
507 :  Integer: 5 
507 : 
427 --> 508
508 :  MatchArm : 
508 --> 509
509 :  MatchArm::pattern : 
509 --> 510
510 :  Pattern : 
510 --> 511
511 :  Pattern::Tuple : 
511 --> 512
512 :  Pattern : 
512 --> 513
513 :  Pattern::Var : 
513 --> 514
514 :  Expr::Var : "_"
514 : 
511 --> 515
515 :  Pattern : 
515 --> 516
516 :  Pattern::Ctor : 
516 --> 517
517 :  ty_name : "List" 
517 : 
516 --> 518
518 :  name : "Cons" 
518 : 
516 --> 519
519 :  NamelessFields : 
519 --> 520
520 :  Pattern : 
520 --> 521
521 :  Pattern::Var : 
521 --> 522
522 :  Expr::Var : "_"
522 : 
519 --> 523
523 :  Pattern : 
523 --> 524
524 :  Pattern::Var : 
524 --> 525
525 :  Expr::Var : "_"
525 : 
508 --> 526
526 :  MatchArm::expr : 
526 --> 527
527 :  Integer: 6 
527 : 
120 --> 528
528 :  Expr::For : 
528 --> 529
529 :  start :
529 --> 530
530 :  Integer: 0 
530 : 
528 --> 531
531 :  end : 
531 --> 532
532 :  Integer: 10 
532 : 
528 --> 533
533 :  body : 
533 --> 534
534 :  Expr::Block : 
534 --> 535
535 :  Expr::Assign : 
535 --> 536
536 :  name : "first"
536 : 
535 --> 537
537 :  rhs : 
537 --> 538
538 :  Expr::Var : "i"
538 : 
120 --> 539
539 :  Expr::For : 
539 --> 540
540 :  start :
540 --> 541
541 :  Integer: 0 
541 : 
539 --> 542
542 :  end : 
542 --> 543
543 :  Integer: 10 
543 : 
539 --> 544
544 :  body : 
544 --> 545
545 :  Expr::Block : 
545 --> 546
546 :  Expr::Assign : 
546 --> 547
547 :  name : "first"
547 : 
546 --> 548
548 :  rhs : 
548 --> 549
549 :  Expr::Var : "i"
549 : 
545 --> 550
550 : Expr::Break
550 : 
120 --> 551
551 :  Expr::For : 
551 --> 552
552 :  start :
552 --> 553
553 :  Integer: 0 
553 : 
551 --> 554
554 :  end : 
554 --> 555
555 :  Integer: 10 
555 : 
551 --> 556
556 :  body : 
556 --> 557
557 :  Expr::Block : 
557 --> 558
558 :  Expr::Assign : 
558 --> 559
559 :  name : "first"
559 : 
558 --> 560
560 :  rhs : 
560 --> 561
561 :  Expr::Var : "i"
561 : 
557 --> 562
562 : Expr::Continue
562 : 
120 --> 563
563 :  Expr::For : 
563 --> 564
564 :  start :
564 --> 565
565 :  Integer: 0 
565 : 
563 --> 566
566 :  end : 
566 --> 567
567 :  Integer: 10 
567 : 
563 --> 568
568 :  body : 
568 --> 569
569 :  Expr::Block : 
569 --> 570
570 :  Expr::Assign : 
570 --> 571
571 :  name : "first"
571 : 
570 --> 572
572 :  rhs : 
572 --> 573
573 :  Expr::Call : 
573 --> 574
574 :  func : 
574 --> 575
575 :  Expr::Var : "g"
575 : 
573 --> 576
576 :  args : 
576 --> 577
577 :  Expr::Var : "i"
577 : 
576 --> 578
578 :  Expr::BinOpExpr : 
578 --> 579
579 :  lhs : 
579 --> 580
580 :  Expr::Var : "i"
580 : 
578 --> 581
581 :  op : 
581 --> 582
582 : +
582 : 
578 --> 583
583 :  rhs : 
583 --> 584
584 :  Integer: 1 
584 : 
569 --> 585
585 :  Expr::If : 
585 --> 586
586 :  cond : 
586 --> 587
587 :  Expr::BinOpExpr : 
587 --> 588
588 :  lhs : 
588 --> 589
589 :  Expr::Var : "i"
589 : 
587 --> 590
590 :  op : 
590 --> 591
591 : ==
591 : 
587 --> 592
592 :  rhs : 
592 --> 593
593 :  Integer: 5 
593 : 
585 --> 594
594 :  then : 
594 --> 595
595 :  Expr::Block : 
595 --> 596
596 : Expr::Break
596 : 
120 --> 597
597 :  Expr::For : 
597 --> 598
598 :  start :
598 --> 599
599 :  Integer: 0 
599 : 
597 --> 600
600 :  end : 
600 --> 601
601 :  Integer: 10 
601 : 
597 --> 602
602 :  body : 
602 --> 603
603 :  Expr::Block : 
603 --> 604
604 :  Expr::Assign : 
604 --> 605
605 :  name : "first"
605 : 
604 --> 606
606 :  rhs : 
606 --> 607
607 :  Expr::Var : "i"
607 : 
603 --> 608
608 :  Expr::If : 
608 --> 609
609 :  cond : 
609 --> 610
610 :  Expr::BinOpExpr : 
610 --> 611
611 :  lhs : 
611 --> 612
612 :  Expr::Var : "i"
612 : 
610 --> 613
613 :  op : 
613 --> 614
614 : ==
614 : 
610 --> 615
615 :  rhs : 
615 --> 616
616 :  Integer: 5 
616 : 
608 --> 617
617 :  then : 
617 --> 618
618 :  Expr::Block : 
618 --> 619
619 : Expr::Continue
619 : 
120 --> 620
620 :  Expr::While : 
620 --> 621
621 :  cond :
621 --> 622
622 :  Expr::BinOpExpr : 
622 --> 623
623 :  lhs : 
623 --> 624
624 :  Expr::Var : "a"
624 : 
622 --> 625
625 :  op : 
625 --> 626
626 : >=
626 : 
622 --> 627
627 :  rhs : 
627 --> 628
628 :  Expr::Var : "b"
628 : 
620 --> 629
629 :  body : 
629 --> 630
630 :  Expr::Block : 
630 --> 631
631 :  Expr::Assign : 
631 --> 632
632 :  name : "a"
632 : 
631 --> 633
633 :  rhs : 
633 --> 634
634 :  Expr::BinOpExpr : 
634 --> 635
635 :  lhs : 
635 --> 636
636 :  Expr::Var : "a"
636 : 
634 --> 637
637 :  op : 
637 --> 638
638 : -
638 : 
634 --> 639
639 :  rhs : 
639 --> 640
640 :  Integer: 1 
640 : 
120 --> 641
641 :  Expr::Return : 
641 --> 642
642 :  return output : 
642 --> 643
643 :  Expr::Var : "a"
643 : 
120 --> 644
644 :  Integer: 0 
state 0<<fork>> 
@enduml